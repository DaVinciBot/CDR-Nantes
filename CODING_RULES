Ce document va permettre de rÃ©unir les rÃ©gles nÃ©cessaire, voir les Ã©tapes pour permettre la meilleur gestion du github et Ã©viter le chaos aprÃ¨s quelques mois.
Elle sont majoritairement inspirÃ© de celle de Paris ( merci pour l'aide et le notion):



# RÃ¨gles basiques

- **READ THE FUCKING MANUAL :** Avant de coder lit la DOC des fonctions/classes que tu va potentiellement utiliser/modifier.
- **LisibilitÃ©** : Rajouter des **Docstring et des commentaires**, les noms de variables doivent Ãªtre **claires etexplicites** â‡’ Votre code doit Ãªtre comprÃ©hensible pour un **A1 voir un Terminal**.
- **Fonctions courtes** : Divisez le code en petites fonctions ou mÃ©thodes qui accomplissent une **seule tÃ¢che**. Ca simplifie largement le code et sa comprÃ©hension.
- **RÃ©utilisabilitÃ©** : Ã‰vitez la duplication de code en crÃ©ant des fonctions rÃ©utilisables. La POO est faites pour la rÃ©utiliser au maximum le code. Penser toujours Ã  **lâ€™hÃ©ritage, le polymorphisme** et autre concept de la POO. Si on vous apprend Ã§a en cours câ€™est pas pour rien ! Alors avant de dÃ©velopper une nouvelle feature regardez si elle peut pas rÃ©utiliser un fonction/classe dÃ©jÃ  existante, et si lâ€™on peut utiliser les concepts de POO pour la dÃ©veloppÃ©. Il faut **toujours** rester dans cette dynamique POO.

## Norme PEP8

https://peps.python.org/pep-0008/

https://marketplace.visualstudio.com/items?itemName=ms-python.black-formatter

### 1. **Longueur des lignes**

- Limitez la longueur des lignes Ã  **79** caractÃ¨res pour le code et Ã  **72** caractÃ¨res pour les commentaires.

### 2. **Espaces**

- Utilisez des espaces autour des opÃ©rateurs et aprÃ¨s les virgules, mais **pas Ã  l'intÃ©rieur** des parenthÃ¨ses, crochets ou accolades.

### 3. **Commentaires**

- Les commentaires doivent Ãªtre *clairs et utiles*. Utilisez des commentaires en ligne pour expliquer des parties complexes du code.
- Les docstrings (chaÃ®nes de documentation) doivent Ãªtre utilisÃ©es pour documenter les modules, fonctions, classes et mÃ©thodes.

### 4. **Nommage**

- Utilisez des noms **explicites** pour les variables, fonctions, classes et modules.
- Les noms de variables et de fonctions doivent Ãªtre en **minuscules** avec des mots sÃ©parÃ©s par des **underscores** (ex : `my_variable`).
- Les noms de classes doivent utiliser le style **CamelCase** (ex : `MyClass`).

### 5. **Importations**

- Utilisez des importations absolues plutÃ´t que relatives.

### 6. **Espaces blancs**

- *Ã‰vitez les espaces blancs superflus Ã  la fin des lignes ou Ã  l'intÃ©rieur des parenthÃ¨ses, crochets ou accolades*.

### 7. **Structures de contrÃ´le**

- Utilisez des lignes vides pour sÃ©parer les blocs de code logiquement distincts.
- Utilisez des parenthÃ¨ses pour les expressions complexes dans les instructions `if`, `for`, `while`, etc.

# Tests

Vos features doivent Ãªtre **TOUJOURS** testÃ©es. Cela paraÃ®t logique et basique mais *il faut le faire.*

**Testez vos features sur le robot** ! Ou alors lorsque ce nâ€™est pas possible crÃ©ez des **tests unitaires** pour vÃ©rifier que tout fonctionne !

**Faites des tests rÃ©gressifs** ! Quand vous testez votre changement, vÃ©rifiez bien quece changement *ne change pas* le comportement du code de base. Si vous faites du refactoring câ€™est la mÃªme chose, le comportement du code ne doit pas *se dÃ©grader*.

â‡’ https://www.youtube.com/watch?v=YMPlQCYp7xg

**KEEP IT SIMPLE, STUPID.**

Evitez la complexitÃ© inutile. Si une solution simple fonctionne, utilisez-la.

**Prenez du recul**. Lorsquâ€™on est dans un effet tunnel on ne prend pas assez de recul. On fonce tÃªte baissÃ©e dans une solution quâ€™on pense Ãªtre la meilleure, mais parfois ce nâ€™est pas la plus simple.

A partir de maintenant les personnes pouvant merge dans la branche dev sont limitÃ©s. A definir pour la suite.

Pour faire un merge il faut dâ€™abord faire une Pull Request. Et les personnes habilitÃ©s vont pouvoir relire, tester, demander des amendements et enfin merge dans dev.

Ces Pull Request seront gÃ©rer une fois par semaine.

GÃ©rer les Pull Request câ€™est long. ***TrÃ¨s long***. Surtout quand on est 10 Ã  dÃ©velopper. Donc pour faciliter cette tÃ¢che et ne pas perdre du temps **TOUTES** les rÃ¨gles ci-dessus sont Ã  respecter, sinon on vous renvoie la balle jusquâ€™Ã  ce que vous avez tout fixe.

Ca vous fait chiez ? Les master aussi. Mais si **TOUT** le monde respecte ces rÃ¨gles ci-dessus, tout le monde sâ€™entendra bien et tout ira beaucoup plus vite, croyez le moiğŸ˜‰.